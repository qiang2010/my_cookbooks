# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
# 
#    http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# see kafka.server.KafkaConfig for additional details and defaults

############################# Server Basics #############################

# The id of the broker. This must be set to a unique integer for each broker.
broker.id=<%@broker_id%>

############################# Socket Server Settings #############################

# The port the socket server listens on
port=9092

# Hostname the broker will bind to and advertise to producers and consumers.
# If not set, the server will bind to all interfaces and advertise the value returned from
# from java.net.InetAddress.getCanonicalHostName().
#host.name=localhost

# The number of threads handling network requests
num.network.threads=8
 
 # The number of threads doing disk I/O
 num.io.threads=8

 # The send buffer (SO_SNDBUF) used by the socket server
 socket.send.buffer.bytes=1048576

 # The receive buffer (SO_RCVBUF) used by the socket server
 socket.receive.buffer.bytes=1048576

 # The maximum size of a request that the socket server will accept (protection against OOM)
 socket.request.max.bytes=104857600

 # Socket server configuration
 queued.max.requests=16
 fetch.purgatory.purge.interval.requests=100
 producer.purgatory.purge.interval.requests=100

 ############################# Log Basics #############################

 # A comma seperated list of directories under which to store log files
 log.dirs=/home/vagrant/local/kafka/data

 # The number of logical partitions per topic per server. More partitions allow greater parallelism
 # for consumption, but also mean more files.
 num.partitions=5

 ############################# Log Flush Policy #############################

 # The following configurations control the flush of data to disk. This is among the most
 # important performance knob in kafka.
 # There are a few important trade-offs here:
 #    1. Durability: Unflushed data may be lost if you are not using replication.
 #    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.
 #    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to exceessive seeks. 
 # The settings below allow one to configure the flush policy to flush data after a period of time or
 # every N messages (or both). This can be done globally and overridden on a per-topic basis.

 # The number of messages to accept before forcing a flush of data to disk

 # The maximum amount of time a message can sit in a log before we force a flush
 default.replication.factor=1

 # Replication configurations
 num.replica.fetchers=4
 replica.fetch.max.bytes=1048576
 replica.fetch.wait.max.ms=500
 replica.high.watermark.checkpoint.interval.ms=5000
 replica.socket.timeout.ms=30000
 replica.socket.receive.buffer.bytes=65536
 replica.lag.time.max.ms=10000
 replica.lag.max.messages=4000

 controller.socket.timeout.ms=30000
 controller.message.queue.size=10

 # Log configuration
 message.max.bytes=1000000
 auto.create.topics.enable=true
 log.index.interval.bytes=4096
 log.index.size.max.bytes=10485760

 log.flush.interval.ms=800
 log.flush.interval.messages=10000
 log.flush.scheduler.interval.ms=2000


 # Per-topic overrides for log.flush.interval.ms
 #log.flush.intervals.ms.per.topic=topic1:1000, topic2:3000

 ############################# Log Retention Policy #############################

 # The following configurations control the disposal of log segments. The policy can
 # be set to delete segments after a period of time, or after a given size has accumulated.
 # A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
 # from the end of the log.

 # The minimum age of a log file to be eligible for deletion
 log.retention.hours=12

 # A size-based retention policy for logs. Segments are pruned from the log as long as the remaining
 # segments don't drop below log.retention.bytes.
 #log.retention.bytes=1073741824

 # The maximum size of a log segment file. When this size is reached a new log segment will be created.
 log.segment.bytes=1073741824

 # The interval at which log segments are checked to see if they can be deleted according 
 # to the retention policies
 log.cleanup.interval.mins=30

 ############################# Zookeeper #############################

 # Zookeeper connection string (see zookeeper docs for details).
 # This is a comma separated host:port pairs, each corresponding to a zk
 # server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
 # You can also append an optional chroot string to the urls to specify the
 # root directory for all kafka znodes.
 zookeeper.connect=192.168.2.20:2181

 # Timeout in ms for connecting to zookeeper
 zookeeper.connection.timeout.ms=6000
 zookeeper.sync.time.ms=2000
